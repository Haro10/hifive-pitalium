plugins {
    id('java')
    id('checkstyle')
    id('signing')
    id('maven')
    id('net.saliman.cobertura').version('2.4.0')
}

group = 'com.htmlhifive'
archivesBaseName = 'pitalium'
version = '1.3.0beta2'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    powermockVersion = '1.6.6'
    log4j2Version = '2.8.1'
}

dependencies {
    compile("junit:junit:4.12")
    compile("org.apache.commons:commons-lang3:3.5")
    compile("org.slf4j:slf4j-api:1.7.25")
    compile("com.fasterxml.jackson.core:jackson-databind:2.8.7")
    compile("org.seleniumhq.selenium:selenium-support:3.8.1")
    compile("commons-io:commons-io:2.5")

    testCompile("org.hamcrest:java-hamcrest:2.0.0.0")
    testCompile("org.powermock:powermock-api-mockito:${powermockVersion}")
    testCompile("org.powermock:powermock-module-junit4:${powermockVersion}")

    testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")
    testRuntime("org.apache.logging.log4j:log4j-core:${log4j2Version}")
}

checkstyle {
    configFile = file('config/hifive-checkstyle-rule.xml')
}

tasks.withType(AbstractCompile).each {
    it.options.encoding = 'UTF-8'
}

task showname {
    println project.name
}

test {
//    include('**/common/util/*', '**/core/**/*', '**/image/**/*', '**/junit/*')
    exclude('**/*')
}

javadoc {
    options.encoding = 'utf-8'
    failOnError = false
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(javadocJar, sourcesJar)
}

signing {
    sign(configurations.archives)
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)

                def proxyHost = System.getProperty('https.proxyHost')
                if (proxyHost != null) {
                    proxy(host: proxyHost, port: System.getProperty('https.proxyPort') as int, type: 'http')
                }
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)

                def proxyHost = System.getProperty('https.proxyHost')
                if (proxyHost != null) {
                    proxy(host: proxyHost, port: System.getProperty('https.proxyPort') as int, type: 'http')
                }
            }

            pom.project {
                name('Pitalium')
                packaging('jar')
                description('Libraries for supporting regression testing of Web applications on multiple browsers and devices using Selenium Grid and Appium.')
                url('https://github.com/hifive/hifive-pitalium')

                scm {
                    url('https://github.com/hifive/hifive-pitalium')
                    connection('scm:git:git@github.com:hifive/hifive-pitalium.git')
                    developerConnection('scm:git:git@github.com:hifive/hifive-pitalium.git')
                }

                licenses {
                    license {
                        name('The Apache License, Version 2.0')
                        url('http://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }

                developers {
                    developer {
                        id('hifive')
                        name('hifive')
                        email('contact@htmlhifive.com')
                    }
                }
            }
        }
    }
}
